<!-- 
  FSWebServer - Example Index Page
  Copyright (c) 2015 Hristo Gochkov. All rights reserved.
  This file is part of the ESP8266WebServer library for Arduino environment.
 
  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.
  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.
  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-->
<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-type" content="text/html; charset=utf-8">
  <title>ESP Monitor</title>
  <script type="text/javascript" src="graphs.js"></script>
  <script type="text/javascript">
    var heap,temp,digi;
    var reloadPeriod = 1000;
    var running = false;
    var websock;

    function webSocketLoad() {
      websock = new WebSocket('ws://' + window.location.hostname + ':81/');
      websock.onopen = function(evt) { console.log('websock open'); };
      websock.onclose = function(evt) { console.log('websock close'); };
      websock.onerror = function(evt) { console.log(evt); };
      websock.onmessage = function(evt) {
        // console.log(evt);
        [key,value] = evt.data.split(":");
        document.getElementById(key).innerHTML = value;
      };
    };

    function buttonclick(e) {
      if (e.id == "ledon")
        websock.send("led:1");
      else
        websock.send("led:0");
    }
    
    function loadValues(){
      if(!running) return;
      var xh = new XMLHttpRequest();
      xh.onreadystatechange = function(){
        if (xh.readyState == 4){
          if(xh.status == 200) {
            var res = JSON.parse(xh.responseText);
            heap.add(res.heap);
            temp.add(res.analog);
            digi.add(res.gpio);
            if(running) setTimeout(loadValues, reloadPeriod);
          } else running = false;
        }
      };
      xh.open("GET", "/status", true);
      xh.send(null);
    };
    
    function run(){
      if(!running){
        running = true;
        loadValues();
      }
    }
    
    function onBodyLoad(){
      webSocketLoad();
      run();
    }
  </script>
</head>
<body id="index" style="margin:0; padding:0;" onload="onBodyLoad()">
 <pre> ncTypeRev:    <span id="nctyperev">???</span>
 uptime:       <span id="uptime">???</span>
 <hr>
 Pump 19
 1st Stage T:  <span id="p19stage1t">???</span>
 2nd Stage T:  <span id="p19stage2t">???</span>
 Vacuum:       <span id="p19vacuum">???</span>
 Pump:         <span id="p19on">???</span>
 TC:           <span id="p19tcon">???</span>
 Rough:        <span id="p19rough">???</span>
 Purge:        <span id="p19purge">???</span>
 </pre>
</body>
</html>
